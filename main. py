from tkinter import *
import math,random,os
from tkinter import messagebox
import arabic_reshaper
import bidi.algorithm
from sql import *
import sqlite3
from tkinter import ttk
import tkinter as tk

from awesometkinter.bidirender import add_bidi_support


class Student :
    def __init__(self,root):
    
        self.root=root
        self.root.geometry('650x1300')
        self.root.resizable(False,False)
        #_________المتغرات
        self.id_var=StringVar()
        self.name_var=StringVar()
        self.adress_var=StringVar()
        self.email_var=StringVar()
        self.adress_var=StringVar()
        self.certi_var=StringVar()
        self.jender_var=StringVar()
        self.phon_var=StringVar()
        self.delet_var=StringVar()
        global select_item
        self.e1=StringVar()
        self.se_var=StringVar()
        self.se_by=StringVar()

        con=sqlite3.connect("db_student.db")
        
        cur=con.cursor() 
        
        
        def arabic(text):
                                     
                                      reshap_text=arabic_reshaper.reshape(text)
                                     
                                      bidi_text=bidi.algorithm. get_display(reshap_text)
                                      return bidi_text
                               #البداية___________________
        text_titil=arabic("منظومة تسجيل طلبة")
        self.root.wm_title(text_titil)
        self.root.config(bg="silver")
        label_title=Label(root,text=text_titil,font=('Arial',19),bg='#87CEFA',fg='#0B2f3A')
        label_title.pack(fill=X)
        
        
        wrapper1=LabelFrame(self.root,text=arabic("قائمة بيانات الطلبة"))
        wrapper2=LabelFrame(self.root,text=arabic("بيانات طالب"))
        wrapper3=LabelFrame(self.root,text="custemar data")
        wrapper1.pack(fill="both",padx=20,pady=10,expand='yes')
        wrapper2.pack(fill="both",expand="yes",padx=20,pady=10)
        wrapper3.pack(fill="both",expand="yes",padx=20,pady=10)
       # frame1=Frame(wrapper2,width=250,height=250,bg='#0B2f3A')
     #   frame1.place(x=10,y=10)
        #اسم الطالب
        text_name=arabic("الاسم الرباعي")
        label_name=Label(wrapper2,text=text_name,font=('Arial',14),bg='#0B2f3A',fg='white',width=12)
        label_name.place(x=430,y=5)
        self.ent_name=Entry(wrapper2,selectforeground="black",width=27,selectbackground="white",justify='center',bd='4',textvariable=self.name_var,font=('Arial',12))
        self.ent_name.place(x=130,y=5)
        
        add_bidi_support( self.ent_name)
       
   
        #ايمل الطالب
        text_email=arabic("البريد الاكتروني")
        label_email=Label(wrapper2,text=text_email,font=('Arial',14),bg='#0B2f3A',fg='white',width=12)
        label_email.place(x=430,y=55)
        self.ent_email=Entry(wrapper2,selectforeground="black",width=27,selectbackground="white",justify='center',bd='4',textvariable=self.email_var,font=('Arial',12))
        self.ent_email.place(x=130,y=55)
        add_bidi_support(self.ent_email)
        #جنس الطالب
   #     text_jender=arabic("جنس الطالب")
   #     label_jender=Label(wrapper2,text=text_jender,font=('Arial',14),bg='#0B2f3A',fg='white',width=12)
  ##      label_jender.place(x=450,y=105)
    #    combo_jender=ttk.Combobox(wrapper2,textvariable=self.jender_var)
 #       combo_jender .place(x=300,y=105,width=150)
      #  combo_jender['value']=(arabic("ذكر"),arabic("انثي"))
        
       
       #_________مؤهل الطالب او الصف 
        text_certi=arabic("الصف")
        label_certi=Label(wrapper2,text=text_certi,font=('Arial',14),fg='white',width=12,bg='#0B2f3A')
        label_certi.place(x= 430,y= 105)
        self.ent_certi=Entry(wrapper2,selectforeground="black",width=27,selectbackground="white",justify='center',bd='4',textvariable=self.certi_var,font=('Arial',12))
        self.ent_certi.place(x=130  ,y=105  )
        add_bidi_support(self.ent_certi)
        
        text_phon=arabic("تليفون الطالب")
        label_phon=Label(wrapper2,text=text_phon,font=('Arial',14),fg='white',width=12,bg='#0B2f3A')
        label_phon.place(x=430,y=155)
        self.ent_phon=Entry(wrapper2,selectforeground="black",width=27,selectbackground="white",justify='center',bd='4',textvariable=self.phon_var,font=('Arial',12))
        self.ent_phon.place(x=130  ,y=155  )
        
        
        text_adress=arabic("عنوان الطالب")
        label_adress=Label(wrapper2,text=text_adress,font=('Arial',14),fg='white',width=12,bg='#0B2f3A')
        label_adress.place(x=430,y=205)
        self.ent_adress=Entry(wrapper2,selectforeground="black",width=27,selectbackground="white",justify='center',bd='4',textvariable=self.adress_var,font=('Arial',12))
        self.ent_adress.place(x=130 ,y=205  )
        add_bidi_support(self.ent_adress)
        text_1=arabic("    ")
     #______حذف باستخدام الاسم
        text_1=arabic("حذف باستخدام الاسم")
        label_1=Label(wrapper2,text=text_1,font=('Arial',14),bg='#0B2f3A',fg='white')
        label_1.place(x=400,y=250)
        ent_delet=Entry(wrapper2,selectforeground="black",width=27,selectbackground="white",justify='center',bd='4',textvariable=self.delet_var,font=('tajawal',14,'bold'))
        ent_delet.place(x=30,y=250)
        btn_del=Button(wrapper2,text=arabic(" حذف بالاسم"),fg='gold',bg='#4f4f4f',font=('tajawal',14,'bold'),command=lambda:self.delet_name())
        btn_del.place(x=10,y=300,width=150 ,height=50)
        add_bidi_support(ent_delet)
        
        #============================
    
            
            
     
        #______الازرار
        
        
        btn_frame=Frame(wrapper3,width=700,height=452,bg='#0B2f3A')
        btn_frame.place(x=0,y=10)
        btn_add=Button(btn_frame,text=arabic('اضافة طالب'),fg='#0B2f3A',bg='#87CEFA',font=('tajawal',14,'bold'),command=self.add_student)
        btn_add.place(x=450,y=20,width=150 ,height=60)
 
        btn_update=Button(btn_frame,text=arabic('تعديل'),fg='#0B2f3A',bg='#87CEFA',font=('tajawal',14,'bold'),command=lambda:self.select())
        btn_update.place(x=280,y=20,width=150 ,height=60)
        
        btn_clear=Button(btn_frame,text=arabic("افراغ الحقول"),fg='#0B2f3A',bg='#87CEFA',font=('tajawal',14,'bold'),command=lambda:self.clear_entries())
        btn_clear.place(x=450,y=100,width=150 ,height=60)
        btn_about=Button(btn_frame,text=arabic("من نحن"),fg='#0B2f3A',bg='#87CEFA',font=('tajawal',14,'bold'))
        btn_about.place(x=280,y=100,width=150 ,height=60)
        
     #   clear_button = Button((btn_frame, text="تفريغ", command=
        #clear_button.place(x=)
        #زر الخذف____________
        
        btn_del=Button(btn_frame,text=arabic("حذف طالب"),fg='#0B2f3A',bg='#87CEFA',font=('tajawal',14,'bold'),command=lambda:self.delete_student())
        btn_del.place(x=110,y=20,width=150 ,height=60)
        btn_up=Button(btn_frame,text=arabic("حفظ التعديل"),fg='#0B2f3A',bg='#87CEFA',font=('tajawal',14,'bold'),command=lambda:self.update())
        btn_up.place(x=110,y=100,width=150 ,height=60)
        
        
        
        
        
        #نافذة البحث
        sersh_frame=Frame(wrapper3,width=435,height=100,bg='white')
        sersh_frame.place(x=160,y=220)  
        com=ttk.Combobox(sersh_frame,justify='center',textvariable=self.se_by)
        com.place(x=10,y=16)
        com['value']=('id','name','adress','phon','email','jender')
        text_ser=arabic("بحث باستخدام")
        label_ser=Label(sersh_frame,text=text_ser,font=('Arial',10),bg='white',fg='black')
        label_ser.place(x=295,y=12)
        ent_ser=Entry(sersh_frame,selectforeground="black",width=27,selectbackground="white",justify='center',bd='4',textvariable=self.se_var)
        ent_ser.place(x=130,y=50)
        add_bidi_support(ent_ser)
        btn_ser=Button(sersh_frame,text=arabic("بحث"),fg='#0B2f3A',bg='#87CEFA',font=('tajawal',14,'bold'),command=lambda:self.searsh())
        btn_ser.place(x=20,y=40)
        #_________عرض النتائجgreat interview
        self.student_table=ttk.Treeview(wrapper1,columns=('adress','phon','certi','email','name','id'))
        
        hsb=ttk.Scrollbar(wrapper1,orient='horizontal',command=self.student_table.xview)
        self.student_table.configure(xscrollcommand=hsb.set)
        hsb.pack(fill=X,side=BOTTOM)
        
        
        vsb=ttk.Scrollbar(wrapper1,orient='vertical')
        vsb.configure(command=self.student_table.yview)
        self.student_table.configure(yscrollcommand=vsb.set)
        vsb.pack(fill=Y,side=RIGHT)

        self.student_table.place(x=20,y=10)
        
        self.student_table['show']='headings'
        self.student_table.heading('adress',text=arabic("العنوان"),anchor=tk.CENTER)
        self.student_table.heading('phon',text=arabic('رقم الهاتف'),anchor=tk.CENTER)
        self.student_table.heading('certi',text=arabic('المؤهل'),anchor=tk.CENTER)
        self.student_table.heading('email',text=arabic('البريد الاكتروني'),anchor=tk.CENTER)
        self.student_table.heading('name',text=arabic('الاسم'),anchor=tk.CENTER)
        self.student_table.heading('id',text=arabic('الرقم'),anchor=tk.CENTER)
        
    #    self.student_table.column('#0',width=0,stretch=NO)
        self.student_table.column('adress',anchor=E,width=60)
        self.student_table.column('phon',anchor=CENTER,width=100)
        
        self.student_table.column('email',anchor=E,width=150)
        self.student_table.column('certi',width=90)
        
        self.student_table.column('name',anchor=E,width=120)
        self.student_table.column('id',anchor=CENTER,width=50)
        self.start_refresh()
        
        
        #___________ربط قاعدة بيانات واضافة في ملف الطالب
    def delet_name(self):
        def arabic(text):
                                     
                                      reshap_text=arabic_reshaper.reshape(text)
                                      
                                      bidi_text=bidi.algorithm. get_display(reshap_text)
                                      return bidi_text
        con=sqlite3.connect("db_student.db")
        cursor=con.cursor()
        
        n1=self.delet_var.get()
        de_name=arabic("n1")
        cursor.execute("DELETE FROM student  WHERE name = ?" ,("  "+ de_name+ "  ",))
        con.commit()
        con.close()
        print(de_name)
        self.start_refresh()
     #   self.start_fetch_all()
       # return(self)
        
      
    def add_student(self):
       
      con=sqlite3.connect("db_student.db")
      cursor=con.cursor()
    
    #_________متغيرات تحوي حقول الادخال entry
      self.id1_var=self.id_var.get()
      self.name1_var=self.name_var.get()
      self.adress1_var=self.adress_var.get()
      self.certi1_var=self.certi_var.get()
      self.phon1_var=self.phon_var.get();self. jender1_var=self.jender_var.get();self.email1_var=self.email_var.get()
      
      if  self.name1_var=="":
          messagebox.showerror('خطأ','بيانات  ناقصة')
          
      else: 
          insertQuery="INSERT INTO student( name,adress,certi,phon,jender,email) VALUES (?,?,?,?,?,?)"
          vals=(self.name1_var,self.adress1_var,self.certi1_var,self.phon1_var,self.jender1_var,self.email1_var)
          cursor.execute(insertQuery,vals)
          con.commit()
          con.close()

          self.start_refresh()
          
    def fetch_all(self):
       def arabic(text):
                                      reshap_text=arabic_reshaper.reshape(text)
                                      
                                      bidi_text=bidi.algorithm. get_display(reshap_text)
                                      return bidi_text
                                      
        #sdd some style
       self.style=ttk.Style()
         #pick the s THeme
       self.style.theme_use('default')
    #configuer the treeview colors
       self.style.configure('treeview',backgroundg='d3d3d3',foreground='black',rowhieght=25,fieldbackground='d3d3d3')
    
       self.style.map('treeview',bsckground=[('selected','#237083')])                              
                                      
       con=sqlite3.connect("db_student.db")
       cur=con.cursor()
       cur.execute("SELECT  * FROM student")
       con.commit()
       
       rows=cur.fetchall()
    #   for row in rows:
          #  self.student_table.insert('' ,'end',values=row)
       
#       if  len(rows) !=0 :
       self.student_table.tag_configure('oddrow',background='white')
       self.student_table.tag_configure('evenrow',background='lightblue')
       self.student_table.delete(*self.student_table.get_children())
       
       
       i=1
       for ro in rows:
         if i % 2==0 :
                
                
               self.student_table.insert('',i,text="", values=(arabic(ro[2]),ro[4],arabic(ro[3]),arabic(ro[6]),arabic(ro[1]),ro[0]),tags=('evenrow'))
                 
                 
         else :
               
               self.student_table.insert('',i,text="", values=(arabic(ro[2]),ro[4],arabic(ro[3]),arabic(ro[6]),arabic(ro[1]),ro[0]),tags=('oddrow'))
         i+=1
       con.close()
    #######start refresh
    def start_refresh(self):
       def arabic(text):
                                      reshap_text=arabic_reshaper.reshape(text)
                                      
                                      bidi_text=bidi.algorithm. get_display(reshap_text)
                                      return bidi_text
                                      
        #sdd some style
       self.style=ttk.Style()
         #pick the s THeme
       self.style.theme_use('default')
    #configuer the treeview colors
       self.style.configure('treeview',backgroundg='d3d3d3',foreground='black',rowhieght=25,fieldbackground='d3d3d3')
    
       self.style.map('treeview',bsckground=[('selected','#237083')])                              
                                      
       con=sqlite3.connect("db_student.db")
       cur=con.cursor()
       cur.execute("SELECT  * FROM student")
       con.commit()
       
       rows=cur.fetchall()
       self.student_table.tag_configure('oddrow',background='white')
       self.student_table.tag_configure('evenrow',background='lightblue')
       self.student_table.delete(*self.student_table.get_children())
       
       
       i=1
       for ro in rows:
         if i % 2==0 :
                
                
               self.student_table.insert('',i,text="", values=(ro[2],ro[4],ro[3],ro[6],ro[1],ro[0]),tags=('evenrow'))
                 
                 
         else :
               
               self.student_table.insert('',i,text="", values=(ro[2],ro[4],ro[3],ro[6],ro[1],ro[0]),tags=('oddrow'))
         i+=1
       con.close()
       
       
       ######REFRESH FUNCTION:
    
       ##########
  
            # delete function
    def delete_student(self):
              con=sqlite3.connect("db_student.db")
              cursor=con.cursor()
              selected_item=self.student_table.selection()[0]
              uid=self.student_table.item(selected_item).get('values')[5]
              sel_data=str((uid))
              cursor.execute("delete from student  where id=?",(sel_data,))
              con.commit()
              self.student_table.delete(selected_item)
              messagebox.showerror('delete','sussficated deleted')
              
              
    def select(self):
      global select_item
      self.clear_entries()

      select_item=self.student_table.selection()[0]
      e1=self.student_table.item(select_item,'values')[4]
      e2=self.student_table.item(select_item,'values')[0]
      e3=self.student_table.item(select_item,'values')[3]
      e4=self.student_table.item(select_item,'values')[1]
      e5=self.student_table.item(select_item,'values')[2]
      
      self.ent_name.insert(0,e1)
      self.ent_adress.insert(0,e2)
      self.ent_email.insert(0,e3)
      self.ent_phon.insert(0,e4)
      self.ent_certi.insert(0,e5)
      
    def update(self):
           
           global e1,e2,e3,e4,e5
           global select_item,na1
           con=sqlite3.connect("db_student.db")
           cur=con.cursor()
           na=self.ent_name.get()
           ad=self.ent_adress.get()
           em=self.ent_email.get()
           ph=self.ent_phon.get()
           ce=self.ent_certi.get()
           def arabic(text):
                                      reshap_text=arabic_reshaper.reshape(text)
                                      
                                      bidi_text=bidi.algorithm. get_display(reshap_text)
                                      return bidi_text
           
           na1=arabic(na)
           ad1=arabic(ad)
           em1=arabic(em)
           ce1=arabic(ce)
           uid=self.student_table.item(select_item).get('values')[5]
           sel_data=str((uid))
           update_statement = 'UPDATE student SET name=?, adress=? ,certi=?,phon=?,email=? WHERE id = ?'
        #   cur.execute(update_statement, (na,ad,ce,str(ph),em,sel_data,))
        
           cur.execute(update_statement, (na1,ad1,ce1,self.ent_phon.get(),em1,sel_data,))
           con.commit()
           messagebox.showerror('update','sussficated update')
           self.start_refresh()
           self.clear_entries()
         #  self.clear()
      
    

# دالة لتفريغ محتوى مربعات الإدخال
    def searsh1(self):
       def arabic(text):
                                      reshap_text=arabic_reshaper.reshape(text)
                                      
                                      bidi_text=bidi.algorithm. get_display(reshap_text)
                                      return bidi_text
                                      
                                  
       ser_name=self.se_var.get()
       con=sqlite3.connect("db_student.db")
       cur=con.cursor()
       cur.execute("SELECT  * FROM student  WHERE    "+str(self.se_by.get() )+"  LIKE  ' % " + str(ser_name) +  " % '  ")
    #   cur.execute("SELECT  * FROM student")
   #       (f"%{search_value}%",)
       con.commit()     
       rows=cur.fetchone()
       if len(rows) !=0 :
           self.student_table.delete(*self.student_table.get_children())
           for row in rows:
             self.student_table.insert('',end,text="", values=row)
             con.close()
             return
       
       
    def clear_entries(self):
        self.ent_name.delete(0, tk.END)
        self.ent_adress.delete(0, tk.END)
        self.ent_certi.delete(0, tk.END)
        self.ent_phon.delete(0, tk.END)
        self.ent_email.delete(0, tk.END)
   
    def searsh(self):
        con=sqlite3.connect("db_student.db")
        cur=con.cursor()
        
        ser_name=self.se_var.get()
       
        
         
        my_cursor=con.execute("SELECT * FROM student WHERE id=?",(ser_name,)  )
        rows=my_cursor.fetchall()
        self.student_table.delete(*self.student_table.get_children())
        i=1
        for ro in rows:
             self.student_table.insert('',i,text="", values=(ro[2],ro[4],ro[3],ro[6],ro[1],ro[0]),tags=('evenrow'))
             
                #  self.student_table.insert('',i,text="", values=(ro[2],ro[4],ro[3],ro[6],ro[1],ro[0]),tags=('oddrow'))
             i+=i
        con.close()
             
             
             
             
             
          
'''      #  self.ent_adress.delete(0, tk.END)
    def select_student_in_treeview(self.student_id):
     
     for child in self.student_table.get_children():
        if self.student_table.item(child, 'values')[0] == self.student_id:
            self.student_table.selection_set(child)
            self.student_table.see(child)
            break


'''# زر لتفريغ مربعات الإدخال

# تشغيل التطبيق

     # SEARSH
 #     
  
    
              
              
root=Tk()
ob=Student(root)                  
root.mainloop()

        
    
